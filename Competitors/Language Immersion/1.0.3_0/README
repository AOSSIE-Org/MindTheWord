(TODO: UPDATE THIS FILE)

I'll go over all of this with you on the call latter, but a quick run down:

== manifest.json ==
Index file to the extension -- Tell the plugin what to load and what permissions to ask for.


== popup.html ==
This is where you'll spend most of your time to start with.  It's pretty much a standard html file.  You can link to resources in this directory with relative paths.  The cool thing about writing plugins is that you don't need to worry about cross browser compatibility issues, and so we should leverage as much as that as possible (think input type="range" over jquery-ui slider elements -- If we can style them nicely).

This page will likely use javascript and local storage to save and edit the plugin's preferences.

== css/popup.css ==
This is the css file used to style the popup.


== css/page-styles.css ==
These are the styles that are injected into the page.  Currently the animations are done using only CSS transforms (and only using javascript to add / remove the classes to trigger them).  I think it's going to be important to namespace our css classes, and make sure that they are fairly specific to the html we are injecting so that we do not clobber the pages we run on.  We are also going to have to do some testing / hacking to make sure that if someone specifies something like:
  h1 span { color: red; }
and our javascript inserts a span inside of an h1, that we detect the styles it should have and apply them to our element.


== js/common_word_list.js ==
A javascript file that sets a variable with common words we may want to translate.  It might be useful to change this for the page you want to test it on.  Cherry picked results for (http://www.nytimes.com/2011/04/17/magazine/mag-17Sugar-t.html?_r=1&src=me&ref=general).  Note that the current code to search for words on a page is really bad and so if you add to many words to this list, it will go really slow.


== js/transition.js ==
This is the file used to manage the transition from English -> {Translated Language}.  This combined with the css/page-styles.css will cause the current animations.  We may need to extend this to allow pure JS animations as well, but lets try to leverage as much CSS3 type stuff when possible.



Additional resources:
  - Sample projects:  http://code.google.com/chrome/extensions/samples.html
  - Video Tutorials:  (really good stuff in this channel)
    - Overview: http://www.youtube.com/watch?v=e3McMaHvlBY&feature=BFa&list=PLCA101D6A85FE9D4B&index=4
    - UI Styling: http://www.youtube.com/watch?v=BZeQETah684&feature=BFa&list=PLCA101D6A85FE9D4B&index=2 
